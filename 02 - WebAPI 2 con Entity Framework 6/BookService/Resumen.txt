

Este tutorial le enseñará los aspectos básicos de la creación de una aplicación web con ASP.NET Web API back-end. El tutorial usa 
Entity Framework 6 para la capa de datos y Knockout.js para la aplicación de JavaScript del lado cliente. El tutorial también muestra 
cómo implementar la aplicación en Azure App Service Web Apps.


Este tutorial usa para crear una aplicación web que se manipula una base de datos back-end ASP.NET Web API 2 con Entity Framework 6.

La aplicación utiliza un diseño de la aplicación de página única (SPA). "Aplicación de página única" es el término general para una 
aplicación web que se carga una página HTML única y, a continuación, actualiza la página de forma dinámica, en lugar de cargar páginas 
nuevas. Después de la carga de página inicial, la aplicación se comunica con el servidor a través de las solicitudes AJAX. El AJAX 
solicita devolver datos JSON, que la aplicación usa para actualizar la interfaz de usuario.

AJAX no es nueva, pero hoy en día existen marcos de JavaScript que resulte más fácil crear y mantener una gran aplicación SPA 
sofisticada. Este tutorial se usa Knockout.js, pero puede usar cualquier marco de cliente de JavaScript.

Estos son los principales bloques de creación para esta aplicación:

    ASP.NET MVC se crea la página HTML.
    ASP.NET Web API controla las solicitudes AJAX y devuelve datos JSON.
    Knockout.js enlaza datos con los elementos HTML a los datos JSON.
    Entity Framework se comunica con la base de datos.

-----------------------------------------------------------------------------------------------------------

MODELOS
Entity Framework utilizará estos modelos para crear tablas de base de datos.

-----------------------------------------------------------------------------------------------------------

CONTROLADORES
En esta sección, vamos a agregar controladores de API Web que admiten operaciones CRUD (crear, leer, actualizar y eliminar). Los controladores usará Entity Framework para comunicarse con la capa de base de datos.

Migraciones de CodeFirst (Entity Framework) para inicializar la BD:
Desde el herramientas menú, seleccione Administrador de paquetes de NuGet, a continuación, seleccione Package Manager Console. En la 
ventana de consola de administrador de paquetes, escriba el siguiente comando: Enable-Migrations
Este comando agrega una carpeta denominada migraciones a su proyecto, además de un archivo de código denominado Configuration.cs en 
la carpeta de migraciones.

Add-Migration Initial: El primer comando genera código que crea la base de datos y el segundo comando ejecuta ese código.

Update-Database: La base de datos se crea localmente, mediante LocalDB. Se ejecuta el método Seed de configuración. En este ejemplo
    se harcodean datos.

El nombre del servidor depende de la versión de mssql que se tenga. Ej: (localdb)\MSSQLLocalDB

-----------------------------------------------------------------------------------------------------------

RELACIONES DE ENTIDAD DE CONTROL

Veamos cómo podemos volver al autor como parte de los datos JSON. Hay tres formas de cargar datos relacionados en Entity
Framework: la carga diligente, la carga diferida y la carga explícita. Existen ventajas y desventajas con cada una de ellas, 
por lo que es importante comprender cómo funcionan.

Carga diligente

Con carga diligente, EF carga las entidades relacionadas como parte de la consulta de base de datos inicial. Para realizar la 
carga diligente, utilice el System.Data.Entity.Include método de extensión.

Carga diferida

Con la carga diferida, EF carga automáticamente una entidad relacionada cuando la propiedad de navegación para esa entidad se 
desreferencia. Para habilitar la carga diferida, que la propiedad de navegación virtual.

-----------------------------------------------------------------------------------------------------------

CREAR OBJETOS DE TRANSFERENCIA DE DATOS (DTO)

El cliente recibe los datos que se asigna directamente a las tablas de base de datos. Sin embargo, no siempre es una buena idea. A 
veces desea cambiar la forma de los datos que envía al cliente. Por ejemplo, puedes:

    Quite las referencias circulares (consulte la sección anterior).
    Ocultar determinadas propiedades que los clientes no deberían para ver.
    Omitir algunas de las propiedades con el fin de reducir el tamaño de la carga.
    Eliminar el formato de gráficos de objetos que contienen objetos anidados, para que sean más conveniente para los clientes.
    Evite "exceso" las vulnerabilidades por publicación. (Consulte validación del modelo para obtener una explicación de la 
    publicación excesiva.)
    Desacoplar del nivel de servicio de su capa de base de datos.

Para lograr esto, puede definir un objeto de transferencia de datos (DTO). Un DTO es un objeto que define cómo se enviarán los datos a 
través de la red.

EF traduce el LINQ seleccione en una instrucción SELECT de SQL.

En este tutorial, estamos convirtiendo los dto manualmente en el código. Otra 
opción consiste en usar una biblioteca como AutoMapper que controla la conversión 
automáticamente.

-----------------------------------------------------------------------------------------------------------